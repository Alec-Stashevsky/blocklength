% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/hhjboot.R
\name{hhjboot}
\alias{hhjboot}
\title{HHJ Algorithm}
\usage{
hhjboot(
  series,
  nb = 100L,
  n_iter = 10L,
  pilot_block_length = NULL,
  sub_block_length = NULL,
  bofb = 1L,
  search_grid = NULL,
  grid_step = c(1L, 1L),
  cl = NULL,
  verbose = TRUE,
  plots = TRUE
)
}
\arguments{
\item{series}{a numeric vector or time series giving the original data for
which to find the optimal block length for.}

\item{nb}{number of bootstrap series to compute.}

\item{n_iter}{maximum number of iterations for HHJ algorithm.}

\item{pilot_block_length}{pilot block length (\eqn{l*} \emph{in HHJ})
for which to perform initial block bootstraps.}

\item{sub_block_length}{length of each overlapping subsample
(\eqn{m} \emph{in HHJ}).}

\item{bofb}{length of the basic blocks in the \emph{block of blocks}
bootstrap.}

\item{search_grid}{the range of solutions around l* to evaluate within the
MSE function after 1st iteration.}

\item{grid_step}{number to increment over subsample block lengths.
If grid_step = 1 then each block length will be evaluated in the MSE
function, if grid_step > 1, the the MSE function will search over the
sequence of block lengths from 1 to m by grid_step. If grid_step is supplied
as a vector of length 2, the the first iteration will step by the first
element and subsequent iterations will step by the second element.}

\item{cl}{a cluster object, created by package \pkg{parallel} or by
package \pkg{snow}. If \code{NULL}, use the non-parallel method.}

\item{verbose}{a logical value, if set to \code{FALSE} then no interim
messages are output to the console. Error messages will still be output.
Default is \code{TRUE}.}

\item{plots}{a logical value, if set to \code{FALSE} then no interim
plots are output to the console. Default is \code{TRUE}.}
}
\description{
Perform the Hall, Horowitz, and Jing (1995) "HHJ" algorithm to select the
optimal block-length \eqn{(l)} for a block bootstrap.
}
\examples{
# Generate AR(1) time series
sim <- stats::arima.sim(list(order = c(1, 0, 0), ar = 0.5),
                        n = 500, innov = rnorm(500))

# Calculate optimal block length for series
hhjboot(sim, sub_block_length = 10)

\dontrun{
# Use parallel computing
library(parallel)

# Make cluster object with all cores available
cl <- makeCluster(detectCores())

# Calculate optimal block length for series
hhjboot(sim, cl = cl)
}

}
